@page "/"
@using Faucet.Models
@using Faucet.Data
@using System.Timers
@using Base58Check
@using Faucet.Helpers
@using Faucet.Services
@using Faucet.Wallet

@inject DataService LatestBlocksService
@inject IWallet Wallet;
@inject IBackgroundWorkerQueue BackgroundWorkerQueue;

@implements IDisposable

<PageTitle>Faucet</PageTitle>

<div class="lds-ripple positionLdsRipple @_hiddenSpinner">
    <div>wait</div>
    <div>@_messageSpinner</div>
</div>


<div class="container-fluid" style="margin-top: 40px">
    <div style="margin-left: 20px">
            <p>
                <h4 style="color:white">Donate testnet coins to the faucet:</h4>
                <div class="word-break: break-all; inline-size: 150px">
                    waPZmW8QayXtn3Kmc8JfjzxFQcR1QXBavgb7My6Zf4QvpQtjCRxHyRqS6VerGh4coUSEGKAv1bUHncDw8MJANWvXvGGNjZy8AJ1d65
                </div>
            </p>
        
            <p>
                <h4 style="color:#c216c7">You can currently get between 1 and 5 $(CYP) from this faucet every 2.18 minutes. Thank you for your patience.</h4>
            </p>
        
            <p>
                <table>
                    <tr>
                        <td>
                            <h4 style="color:white">Your Cypher testnet address:</h4>
                        </td>
                        <td>
                            <span class="w-100 @_hiddenAddressMessage" style="color:#ff42a1"><b>@_messageAddress</b></span>
                        </td>
                    </tr>
                    <tr>
                        <td Style="width: 90%;">
                            <RadzenTextBox style="display: block" Name="Address" Change=@(args => OnChange(args, "TextBox")) Class="w-100"/>
                        </td>
                        <td>
                            <RadzenButton Icon="paid" Click="@Roll" Text="(CYP)" Disabled="@_wait" ButtonStyle="ButtonStyle.Light"></RadzenButton>
                        </td>
                    </tr>
                </table>
            </p>
        
            <p>
                <span style="padding-right: 10px">Transaction ID:</span><span style="color:#da1ae1"><b>@_txId</b></span>
            </p>
    </div>

    <RadzenCard class="bg-dark bg-transparent">
        <p>
            <div class="row">
                <div class="col-md-6">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Style="color: #da1ae1" Text="Latest Blocks"/>
                    </div>
                    <RadzenDataGrid style="height: 610px" @ref="_gridBlocks" IsLoading=@_isLoading Count="@_count" Data="@_blocks" LoadData="@LoadBlocks" TItem="BlockView" ColumnWidth="200px">
                        <Columns>
                            <RadzenDataGridColumn TItem="BlockView" Property="Height" Filterable="false" Title="Height" Width="100px"/>
                            <RadzenDataGridColumn TItem="BlockView" Property="Size" Filterable="false" Title="Size" Width="140px"/>
                            <RadzenDataGridColumn TItem="BlockView" Property="NrTx" Filterable="false" Title="Tx Count" Width="140px"/>
                            <RadzenDataGridColumn TItem="BlockView" Property="Staked" FormatString="{0:0.00}" Filterable="false" Title="Stake" Width="100px"/>
                            <RadzenDataGridColumn TItem="BlockView" Property="Reward" Filterable="false" Title="Coinbase" Width="100px"/>
                        </Columns>
                    </RadzenDataGrid>
                </div>
                <div class="col-md-6">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Style="color: #da1ae1" Text="Latest Transactions"></RadzenLabel>
                    </div>
                    <RadzenDataGrid style="height: 610px" @ref="_gridTxs" IsLoading=@_isLoading Count="@_count" Data="@_txs" LoadData="@LoadTxs" TItem="TransactionView" ColumnWidth="200px">
                        <Columns>
                            <RadzenDataGridColumn TItem="TransactionView" Property="TxnId" Filterable="false" Title="Hash" Width="100px"/>
                            <RadzenDataGridColumn TItem="TransactionView" Property="To" Filterable="false" Title="To" Width="100px"/>
                        </Columns>
                    </RadzenDataGrid>
                </div>
            </div>
        </p>
    </RadzenCard>

</div>


@code {
    private IEnumerable<BlockView>? _blocks;
    private RadzenDataGrid<BlockView>? _gridBlocks;
    private IEnumerable<TransactionView>? _txs;
    private RadzenDataGrid<TransactionView>? _gridTxs;
    private string _address = string.Empty;
    private string _txId = "none";
    private System.Threading.Timer _timerReload;
    private Timer _timerWait;
    private bool _isLoading;
    private int _count = 1;
    private bool _wait;
    private string _hiddenSpinner = "d-none";
    private string _hiddenAddressMessage = "d-none";
    private string _messageSpinner = string.Empty;
    private string _messageAddress = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _timerWait = new Timer();
        _timerWait.Elapsed += TimerWaitOnElapsed;
        _timerReload = new System.Threading.Timer((_) =>
        {
            Reload();
            InvokeAsync(StateHasChanged);
        }, null, 5000, 10000);
    }
    
    private void TimerWaitOnElapsed(object? sender, ElapsedEventArgs e)
    {
        _timerWait.Stop();
        _messageSpinner = "Queuing transaction..";
        InvokeAsync(StateHasChanged);
        BackgroundWorkerQueue.QueueBackgroundWorkItem(async token =>
        {
            try
            {
                _messageSpinner = "Processing transaction..";
                await InvokeAsync(StateHasChanged);
                var txId = await Wallet.Payout(_address);
                _txId = txId.ByteToHex();
            }
            catch (Exception)
            {
                _txId = "Please try again something went wrong :(";
            }
            finally
            {
                _hiddenSpinner = "d-none";
                _wait = false;
                await InvokeAsync(StateHasChanged);
            }
        });
    }
    
    private async Task Roll()
    {
        await InvokeAsync(() =>
        {
            try
            {
                _hiddenSpinner = "d-none";
                _hiddenAddressMessage = "d-none";
                _txId = "none";
        
                if (string.IsNullOrEmpty(_address))
                {
                    _hiddenAddressMessage = string.Empty;
                    _messageAddress = "Empty Address";
                    return;
                }

                try
                {
                    Base58CheckEncoding.Decode(_address);
                }
                catch (Exception)
                {
                    _hiddenAddressMessage = string.Empty;
                    _messageAddress = "Invalid Base58";
                    return;
                }

                if (_wait) return;

                _timerWait.Interval = 138000;
                _timerWait.Enabled = true;
        
                _messageSpinner = "2.18 minutes..";
                _wait = true;
                _hiddenSpinner = string.Empty;
                _timerWait.Start();
            }
            finally
            {
                StateHasChanged();
            }
        });
    }

    void Reload()
    {
        if (_gridBlocks is null && _gridTxs is null) return;
        _gridBlocks?.Reload();
        _gridTxs?.Reload();
    }
    
    Task LoadBlocks(LoadDataArgs args)
    {
        _isLoading = true;
        _blocks = LatestBlocksService.GetBlocks();
        _isLoading = false;
        return Task.CompletedTask;
    }
    
    Task LoadTxs(LoadDataArgs args)
    {
        _isLoading = true;
        _txs = LatestBlocksService.GetTxs();
        _isLoading = false;
        return Task.CompletedTask;
    }
    
    void OnChange(string value, string name)
    {
        _address = value;
    }
    
    public void Dispose()
    {
        _timerReload.Dispose();
        _timerWait.Dispose();
    }
}